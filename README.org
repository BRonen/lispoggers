* LISPoggers

A statically typed poggers Lisp in Lean.
LISPoggers is an acronym for "Lisp Is Simply Poggers".

** Features

- [ ] Data types
  - [ ] Type constructors
  - [ ] Lists
  - [ ] Maps
- [ ] Pattern matching
- [ ] Functions
- [ ] Macros

** Algebraic Data types

Every structure can be represented by a data type, every datatype is represented by a map of dependencies and a list of constructors that hold types.

#+BEGIN_SRC clojure
(data <dependencies>
  (<constructor> <type>*)*)
#+END_SRC

*** Booleans

Simplest datatype example:

#+BEGIN_SRC clojure
(def Bool
  (data {}
    (false)
    (true)))
#+END_SRC

*** Naturals

I still need to think about its syntax:

#+BEGIN_SRC clojure
(def Nat
  (data {}
    (zero)
    (inc %))) ;; TODO: recursive datatype syntax
#+END_SRC

*** Lists

Generic datatypes receive its parameters as dependencies:

#+BEGIN_SRC clojure
(def List
  (data {a Type}
    (empty)
    (cons a (List a)))) ;; TODO: recursive datatype syntax
#+END_SRC

*** Maps

Runtime values exists and can be used on type level, so it can be used on datatypes definitions

#+BEGIN_SRC clojure
(def Map
  (data {k Type
         v Type}
    (empty)
    (cons k v (Map k v)))) ;; TODO: recursive datatype syntax
#+END_SRC

** Pattern matching

#+BEGIN_SRC clojure
(match <expr>
  (<pattern> <expr>)
  (<pattern> <expr>))
#+END_SRC

*** Matching over booleans

#+BEGIN_SRC clojure
(match <expr>
  (false <expr>)
  (true <expr>))
#+END_SRC

** Functions

#+BEGIN_SRC clojure
(fn <param>
  <param type>
  <return type>

  <expr>)
#+END_SRC

*** Function application

#+BEGIN_SRC clojure
(<fn> <expr>)

;; as in

((fn foo
   Bool
   Bool

   (not foo))
 bar)
#+END_SRC

** Macros

Basically the same as functions but it runs on compile time, so it also has access to types as values.

#+BEGIN_SRC clojure
(macro <param>
  <param type>
  <return type>

  <expr>)
#+END_SRC

*** Macro application

#+BEGIN_SRC clojure
(<macro> <expr>)
#+END_SRC

** Complete BNF grammar

#+BEGIN_SRC ebnf
<expr> ::= <identifier> | <list> | <map>
<list> ::= "(" <divider> <expr> (<divider> <expr>)* <divider> ")"
<map> ::= "{" <divider> <expr> (<divider> <expr>)* <divider>"}"
<identifier> ::= ([a-z] | [A-Z])+
<divider> ::= (" " | "\n")*
#+END_SRC

** Compiler

#+BEGIN_SRC mermaid
flowchart TD
  A[Raw Source Code] --> B[CST]
  B --> C[AST]
  C --> D[Macro Expansion]
  D --> E[Source Compiled to KekwVM Bytecode]
  C --> G[Type Checking Compiled to KekwVM Bytecode]
  C -.- J[Types Checking Interpreter]
  J --> K[Type Checking Evaluation]
  K --> I[Source Type Tree]
#+END_SRC


** Virtual Machine

#+BEGIN_SRC mermaid
flowchart TD
  L[Source as Bytecode] --> M{KekwVM}
  M{KekwVM} --> N[Code Execution]
  O[Type Checking as Bytecode] --> M{KekwVM}
  M{KekwVM} --> P[Type Tree]
#+END_SRC

